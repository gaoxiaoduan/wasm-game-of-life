(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_game_of_life_coderduan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-game-of-life-coderduan */ \"./node_modules/wasm-game-of-life-coderduan/wasm_game_of_life_coderduan.js\");\n/* harmony import */ var wasm_game_of_life_coderduan_wasm_game_of_life_coderduan_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-game-of-life-coderduan/wasm_game_of_life_coderduan_bg */ \"./node_modules/wasm-game-of-life-coderduan/wasm_game_of_life_coderduan_bg.wasm\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./utils/index.js\");\n// import * as wasm from \"hello-wasm-pack\";\n// import { Cell, Universe } from \"wasm-game-of-life\";\n// import { memory } from \"wasm-game-of-life/wasm_game_of_life_bg\";\n\n\n\n\nconst CELL_SIZE = 10; // px\nconst GRID_COLOR = \"#CCCCCC\";\nconst DEAD_COLOR = \"#FFFFFF\";\nconst ALIVE_COLOR = \"#000000\";\nlet animationId = null;\n\nconst universe = wasm_game_of_life_coderduan__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\nconst width = universe.width();\nconst height = universe.height();\n\nconst playPauseButton = document.getElementById(\"play-pause\");\nconst canvas = document.getElementById(\"game-of-life-canvas\");\ncanvas.height = (CELL_SIZE + 1) * height + 1;\ncanvas.width = (CELL_SIZE + 1) * width + 1;\n\nconst ctx = canvas.getContext(\"2d\");\n\ncanvas.addEventListener('click', event => {\n    const boundingRect = canvas.getBoundingClientRect();\n\n    const scaleX = canvas.width / boundingRect.width;\n    const scaleY = canvas.height / boundingRect.height;\n\n    const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n    const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n    const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1);\n    const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1);\n\n    universe.toggle_cell(row, col);\n    drawGrid();\n    drawCells();\n})\n\nconst renderLoop = () => {\n    _utils__WEBPACK_IMPORTED_MODULE_2__[\"fps\"].render();\n\n    // debugger\n    universe.tick();\n    drawGrid();\n    drawCells();\n    animationId = requestAnimationFrame(renderLoop);\n}\n\nconst isPaused = () => animationId === null;\n\nconst play = () => {\n    playPauseButton.textContent = \"⏸\";\n    renderLoop();\n};\n\nconst pause = () => {\n    playPauseButton.textContent = \"▶\";\n    cancelAnimationFrame(animationId);\n    animationId = null;\n};\n\nplayPauseButton.addEventListener(\"click\", event => {\n    if (isPaused()) {\n        play();\n    } else {\n        pause();\n    }\n});\n\nconst drawGrid = () => {\n    ctx.beginPath();\n    ctx.strokeStyle = GRID_COLOR;\n\n    // Vertical lines.\n    for (let i = 0; i <= width; i++) {\n        ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n        ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\n    }\n\n    // Horizontal lines.\n    for (let j = 0; j <= height; j++) {\n        ctx.moveTo(0, j * (CELL_SIZE + 1) + 1);\n        ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\n    }\n    ctx.stroke();\n}\n\nconst getIndex = (row, col) => {\n    return row * width + col;\n}\n\nconst drawCells = () => {\n    const cellsPtr = universe.cells();\n    const cells = new Uint8Array(wasm_game_of_life_coderduan_wasm_game_of_life_coderduan_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, cellsPtr, width * height);\n    ctx.beginPath();\n    ctx.fillStyle = ALIVE_COLOR;\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const idx = getIndex(row, col);\n            if (cells[idx] !== wasm_game_of_life_coderduan__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Alive) {\n                continue;\n            }\n            ctx.fillRect(\n                col * (CELL_SIZE + 1) + 1,\n                row * (CELL_SIZE + 1) + 1,\n                CELL_SIZE,\n                CELL_SIZE\n            );\n        }\n    }\n\n    ctx.fillStyle = DEAD_COLOR;\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const idx = getIndex(row, col);\n            if (cells[idx] !== wasm_game_of_life_coderduan__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Dead) {\n                continue;\n            }\n            ctx.fillRect(\n                col * (CELL_SIZE + 1) + 1,\n                row * (CELL_SIZE + 1) + 1,\n                CELL_SIZE,\n                CELL_SIZE\n            );\n        }\n    }\n\n    ctx.stroke();\n}\n\n\ndrawGrid();\ndrawCells();\n// requestAnimationFrame(renderLoop);\nplay();\n\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./utils/index.js":
/*!************************!*\
  !*** ./utils/index.js ***!
  \************************/
/*! exports provided: fps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fps\", function() { return fps; });\nconst Fps = class {\n    constructor() {\n        this.fps = document.getElementById(\"fps\");\n        this.frames = [];\n        this.lastFrameTimeStamp = performance.now();\n    }\n\n    render() {\n        // Convert the delta time since the last frame render into a measure\n        // of frames per second.\n        const now = performance.now();\n        const delta = now - this.lastFrameTimeStamp;\n        this.lastFrameTimeStamp = now;\n        const fps = 1 / delta * 1000;\n\n        // Save only the latest 100 timings.\n        this.frames.push(fps);\n        if (this.frames.length > 100) {\n            this.frames.shift();\n        }\n\n        // Find the max, min, and mean of our 100 latest timings.\n        let min = Infinity;\n        let max = -Infinity;\n        let sum = 0;\n        for (let i = 0; i < this.frames.length; i++) {\n            sum += this.frames[i];\n            min = Math.min(this.frames[i], min);\n            max = Math.max(this.frames[i], max);\n        }\n        let mean = sum / this.frames.length;\n\n        // Render the statistics.\n        this.fps.textContent = `\n  Frames per Second:\n           latest = ${Math.round(fps)}\n  avg of last 100 = ${Math.round(mean)}\n  min of last 100 = ${Math.round(min)}\n  max of last 100 = ${Math.round(max)}\n  `.trim();\n    }\n};\n\nconst fps = new Fps();\n\n//# sourceURL=webpack:///./utils/index.js?");

/***/ })

}]);